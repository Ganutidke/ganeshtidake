
'use server';
/**
 * @fileOverview An AI assistant that answers questions about the portfolio.
 * - answerQuestion - A function that answers questions based on portfolio content.
 * - PortfolioAssistantInput - The input type for the answerQuestion function.
 * - PortfolioAssistantOutput - The return type for the answerQuestion function.
 */

import { ai } from '@/ai/genkit';
import { z } from 'genkit';

import { getAbout } from '@/lib/actions/about.actions';
import { getBlogs } from '@/lib/actions/blog.actions';
import { getCertificates } from '@/lib/actions/certificate.actions';
import { getEducationHistory } from '@/lib/actions/education.actions';
import { getExperienceHistory } from '@/lib/actions/experience.actions';
import { getFaqs } from '@/lib/actions/faq.actions';
import { getIntro } from '@/lib/actions/intro.actions';
import { getProjects } from '@/lib/actions/project.actions';

const PortfolioAssistantInputSchema = z.object({
  question: z.string().describe('The question the user is asking the assistant.'),
  portfolioContext: z.string().describe('The full content of the portfolio, stringified as JSON.'),
});
export type PortfolioAssistantInput = z.infer<typeof PortfolioAssistantInputSchema>;

const PortfolioAssistantOutputSchema = z.object({
  answer: z.string().describe('The answer to the user\'s question, generated by the AI.'),
});
export type PortfolioAssistantOutput = z.infer<typeof PortfolioAssistantOutputSchema>;

export async function answerQuestion(question: string): Promise<PortfolioAssistantOutput> {
  const [
    intro,
    about,
    projects,
    blogs,
    experience,
    education,
    certificates,
    faqs,
  ] = await Promise.all([
    getIntro(),
    getAbout(),
    getProjects(),
    getBlogs(),
    getExperienceHistory(),
    getEducationHistory(),
    getCertificates(),
    getFaqs(),
  ]);

  const portfolioContext = JSON.stringify({
    intro,
    about,
    projects,
    blogs,
    experience,
    education,
    certificates,
    faqs,
  }, null, 2);

  return portfolioAssistantFlow({ question, portfolioContext });
}

const prompt = ai.definePrompt({
  name: 'portfolioAssistantPrompt',
  input: { schema: PortfolioAssistantInputSchema },
  output: { schema: PortfolioAssistantOutputSchema },
  prompt: `You are a helpful and friendly AI assistant for the personal portfolio of the person described in the context. Your name is "Portfolio Pal".

Your goal is to answer questions from visitors about the person's skills, experience, projects, and other information found in the portfolio.

- Be conversational and professional.
- Base your answers ONLY on the information provided in the portfolio context.
- If the answer is not in the context, politely state that you don't have information on that topic. DO NOT make up information.
- Keep answers concise and to the point.
- If asked about a specific project or blog, try to provide details from the context.
- Your persona is that of a knowledgeable guide for the portfolio.

Portfolio Context:
\`\`\`json
{{{portfolioContext}}}
\`\`\`

User's Question: "{{{question}}}"

Answer:`,
});

const portfolioAssistantFlow = ai.defineFlow(
  {
    name: 'portfolioAssistantFlow',
    inputSchema: PortfolioAssistantInputSchema,
    outputSchema: PortfolioAssistantOutputSchema,
  },
  async (input) => {
    const { output } = await prompt(input);
    return output!;
  }
);
